<?php

/**
 * @file
 */

include_once "tpc_general.protect_critical_users.inc";
include_once "tpc_general.log_permission_changes.inc";
include_once "tpc_general.ctm.inc";

// Additional display formatters for core-provided fields.
include_once('tpc_general.field_formatters.inc');

/**
 * Implementation of hook_init().
 */
function tpc_general_init() {
  
  $path = drupal_get_path('module', 'tpc_general');
  // CSS/JS is added to the theme layer so that it gets picked up by the
  // WYSYWYG API editors.
  drupal_add_css($path . '/tpc_general.css', 'theme');
  drupal_add_js($path . '/tpc_general.js', 'theme');
  
  // Make settings available to js.
  $settings = array(
    'q' => $_GET['q'],
    'core_blocks_disable' => variable_get('tpc_general_core_blocks_disable', 0),
    'core_themes_disable' => variable_get('tpc_general_core_themes_disable', 0),
  );
  drupal_add_js(array('tpc_general' => $settings), 'setting');
  
  // Run init code for protect_critical_users.
  tpc_general_protect_critical_users_init();
}

/**
 * Implements hook_menu().
 */
function tpc_general_menu() {
  $items = array(
    'google77fb9b8c2bc767f8.html' => array(
      'title' => 'Google Webmaster Tools verification file',
      'page callback' => 'tpc_general_gwt_verification',
      'page arguments' => array('google77fb9b8c2bc767f8'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'googled8b6d4569de16b0f.html' => array(
      'title' => 'Google Webmaster Tools verification file',
      'page callback' => 'tpc_general_gwt_verification',
      'page arguments' => array('googled8b6d4569de16b0f'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'BingSiteAuth.xml' => array(
      'title' => 'Bing Webmaster verification file',
      'page callback' => 'tpc_general_bing_verification',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
  $items['admin/settings/tpc_general'] = array(
    'title' => 'TPC General settings',
    'description' => 'Custom configuration options used by TPC staff.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tpc_general_admin_settings_form'),
    'access callback' => 'tpc_general_admin_access',
    'file' => 'tpc_general.admin.inc',
  );
  $items['tpc_general/heartbeat'] = array(
    'title' => 'TPC phone home',
    'description' => 'A poor man\'s heartbeat module implementation.',
    'page callback' => 'tpc_general_heartbeat_report',
    'access callback' => 'tpc_general_heartbeat_access',
    'file' => 'tpc_general.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback for TPC reporting function. Restricts access by IP address.
 */
function tpc_general_heartbeat_access() {
  $allowed_ips = variable_get('tpc_general_wiki_ip', '209.240.78.13,209.240.68.25,209.240.68.26');
  $allowed_ips = explode(',', $allowed_ips);
  if (in_array($_SERVER['REMOTE_ADDR'], $allowed_ips)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Output the Google Webmaster Tools verification string for TPC's account.
 */
function tpc_general_gwt_verification($id) {
  echo "google-site-verification: $id.html";
}

/**
 * Output the Bing Webmaster verification string for TPC's account.
 */
function tpc_general_bing_verification() {
  drupal_set_header('Content-Type: application/xml');
  echo '<?xml version="1.0"?>
<users>
        <user>4DC24E4DF802F9070802BE81B10F6C08</user>
</users>';
}

// Access callback for settings form. Restricts access to superuser for now.
function tpc_general_admin_access() {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 *
 * Various name changes and permission tweaks.
 */
function tpc_general_menu_alter(&$items) {
  $items['admin/content/node-settings']['access arguments'] = array('administer content types');
  if (isset($items['admin/settings/menu_block'])) {
    $items['admin/settings/menu_block']['access arguments'] = array('administer site configuration');
  }
  $items['admin/build/menu-customize/%menu/list']['title'] = "Edit menu structure";
  $items['admin/build/menu-customize/%menu/add']['title'] = "Add menu link";
  $items['admin/build/menu-customize/%menu/edit']['title'] = "Change menu name";
}

/**
 * Implements hook_form_alter().
 *
 * Alterations to NODETYPE_node_form.
 */
function tpc_general_form_alter(&$form, &$form_state, $form_id) {
  // Invoke hook_form_alter() code from include files.
  tpc_general_ctm_form_alter($form, $form_state, $form_id);
  
  if ($form['#id'] == "node-form") {
    // if set, disable "Promoted to front page" checkbox on node forms.
    if (variable_get('tpc_general_node_promote_disable', 0) == 1) {
      $form['options']['promote']['#access'] = FALSE;
    }
    
    // If comments for this node type are disabled, don't show Comment settings
    // on the node form.
    if (isset($form['comment_settings']) && variable_get('comment_' . $form['type']['#value'], 0) == COMMENT_NODE_DISABLED) {
      $form['comment_settings']['#access'] = FALSE;
    }
    
    // Rename "Delete" button on node forms to something more alarming.
    if (isset($form['buttons']['delete']['#value'])) {
      $form['buttons']['delete']['#value'] = t('Delete this node FOREVER');
    }
  }
  switch ($form_id) {
    case "node_delete_confirm":
      $form['actions']['submit']['#value'] = t('I don\'t need this node anymore. Delete it forever.');
      break;
    case "node_type_form":
      // Default comments to Disabled on new node types.
      if (isset($form['comment']['comment'])) {
        $form['comment']['comment']['#default_value'] = variable_get('comment_' . $form['#node_type']->type, COMMENT_NODE_DISABLED);
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the content type creation/edit form based on admin settings.
 */
function tpc_general_form_node_type_form_alter(&$form, &$form_state) {
  if (variable_get('tpc_general_body_label_disable', 0) == 1) {
    $form['submission']['body_label']['#disabled'] = TRUE;
    $form['submission']['body_label']['#default_value'] = NULL;
    $form['submission']['body_label']['#description'] = t('Core body field is disabled. Use a CCK field instead.');
  }
  if (variable_get('tpc_general_node_promote_disable', 0) == 1) {
    unset($form['workflow']['node_options']['#options']['promote']);
  }
}

/**
 * Implements hook_node_type().
 */
function tpc_general_snode_type($op, $info) {
  tpc_general_ctm_node_type($op, $info);
}

function tpc_general_views_api() {
  return array('api' => 2.0);
}

/**
 * Implements hook_cron().
 *
 * If the TPC Wiki Node ID for this site is known, update the wiki.
 * Uses the wiki's XML-RPC server defined by tpc_siteinfo.module.
 */
function tpc_general_cron() {
  $site_nid = variable_get('tpc_general_heartbeat_site_nid', FALSE);
  if (is_numeric($site_nid)) {
    module_load_include('inc', 'tpc_general', 'tpc_general.admin');
    $url = variable_get('tpc_general_heartbeat_url', 'https://www.tripark.org/wiki/xmlrpc.php');
    $data = tpc_general_heartbeat_data();
    $request = xmlrpc($url, 'tpc_siteinfo.stethoscope', (int)$site_nid, $data);
  }
}

/**
 * Implements hook_theme().
 */
function tpc_general_theme() {
  return array(
    'tpc_general_formatter_text_plain_linebreaks' => array(
      'arguments' => array('element' => NULL),
    ),
    'tpc_general_formatter_text_email' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function theme_tpc_general_formatter_text_plain_linebreaks($element) {
  $text = $element['#item']['safe'];
  return nl2br(strip_tags($text));
}

function theme_tpc_general_formatter_text_email($element) {
  $text = trim($element['#item']['safe']);
  return (valid_email_address($text)) ? l($text, 'mailto:' . $text) : $text;
}
function tpc_general_footer($main = 0) {
  if (file_exists('/home/web/STAGING.txt')) {
    drupal_add_css(drupal_get_path('module', 'tpc_general') . '/tpc_general.css');
    return '<div id="tpc_staging">Staging</div>';
  }
}

